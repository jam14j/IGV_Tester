/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package igv_tester;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import com.github.sarxos.webcam.WebcamResolution;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Ellipse2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.JPanel;
//import static igv_tester.IGV_Tester.webcam;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.JFreeChart;
import org.jfree.data.xy.XYSeries;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.chart.ChartUtilities;

/**
 *
 * @author U375716
 */
public class cam_UI extends javax.swing.JFrame {

    public static Webcam webcam;
    
    /**
     * Creates new form cam_UI
     */
    public cam_UI() {
        super();
        //initComponents();
        setLayout( new FlowLayout() );
        setUndecorated(true);
        webcam = Webcam.getDefault();
        webcam.setViewSize(WebcamResolution.VGA.getSize());
       
        WebcamPanel webcamPanel = new WebcamPanel(webcam);
        webcamPanel.setImageSizeDisplayed(true);
        //Graphics g;
        //webcamPanel.paint(g.drawOval(100,100,50,50));
        add(webcamPanel);
        pack();
        
        jButton1 = new javax.swing.JButton();
        jButton1.setText("Capture");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1);
        pack();
        
        setLocationRelativeTo(null);
        pack();
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setVisible(false);
        
        //Close the webcam when the window is closed
        /*addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosed(java.awt.event.WindowEvent windowEvent) {
                super.windowClosed(windowEvent);
                webcam.close();
            }
        });*/
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    /*
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Capture");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(244, 244, 244)
                .addComponent(jButton1)
                .addContainerGap(253, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(349, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(28, 28, 28))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
*/
    public static void getPicture() {
        webcam.open();
        try{ImageIO.write(webcam.getImage(), "JPG", new File("tempcapture.jpg"));}
        catch (IOException e) {System.out.println(e.getMessage());}
    }
    
    public static String validatePicture(List<String> colors) {
        try {
            //BufferedImage image = ImageIO.read(new File("sample_images\\old\\silverdarksample.jpg"));
            BufferedImage image = ImageIO.read(new File("tempcapture.jpg"));
            //grab a handle of all sample pictures
            List<BufferedImage> samplePictures = new ArrayList<>();
            for(int i=0; i<colors.size(); i++) {
                samplePictures.add(ImageIO.read(new File("sample_images\\"+colors.get(i)+"_sample.jpg")));
            }
//            BufferedImage blue = ImageIO.read(new File("sample_images\\bluesample.jpg"));
//            BufferedImage gold = ImageIO.read(new File("sample_images\\goldsample.jpg"));
//            BufferedImage silver = ImageIO.read(new File("sample_images\\silversample.jpg"));
//            BufferedImage black = ImageIO.read(new File("sample_images\\blacksample.jpg"));
            
//            int[] imageHue = new int[361];
//            int[] blueHue = new int[361];
//            int[] goldHue = new int[361];
//            int[] silverHue = new int[361];
//            int[] blackHue = new int[361];
//            for(int i=0; i<361; i++) {
//                imageHue[i]=0;
//                blueHue[i]=0;
//                goldHue[i]=0;
//                blackHue[i]=0;
//                silverHue[i]=0;
//            }
//            
//            for(int x=0; x<image.getTileWidth(); x++) {
//                for(int y=0; y<image.getTileHeight(); y++) {
//                    int rgb = image.getRGB(x,y);
//                    float hsb[] = new float[3];
//                    int r = (rgb >> 16) & 0xFF;
//                    int g = (rgb >>  8) & 0xFF;
//                    int b = (rgb      ) & 0xFF;
//                    Color.RGBtoHSB(r, g, b, hsb);
//                    int tone = Math.round(hsb[0]*360);
//                    imageHue[tone] += 1;
//                    //averageColor+=image.getRGB(x, y);
//                }
//            }
    
            //this is the picture the operator takes
            int[] imageHue = getHue(image);
            //construct 
            List<int[]> sampleHues = new ArrayList<int[]>();
            for(int i=0; i<samplePictures.size(); i++) {
                sampleHues.add(getHue(samplePictures.get(i)));
            }
            
            int[] sums = new int[samplePictures.size()];
            //Initialize all averages
            for(int i=0; i<samplePictures.size(); i++)
                sums[i] = 0;        
            //Calculate averages
            for(int i=0; i<samplePictures.size(); i++) {
                for(int j=0; j<361; j++)
                    sums[i] += Math.abs( sampleHues.get(i)[j]-imageHue[j] );
            }
            //find the average closest to zero and return a string with the color
            int minIndex = 0;
            int minSum = sums[0];
            for(int i=1; i<samplePictures.size(); i++) {
                if(sums[i] < minSum) {
                    minIndex = i;
                    minSum = sums[i];
                }
            }
            System.out.println("Result = "+colors.get(minIndex)+"!");
            return colors.get(minIndex);
            
            /*int[] blueHue = getHue(blue);
            int[] goldHue = getHue(gold);
            int[] silverHue = getHue(silver);
            int[] blackHue = getHue(black);
            int blueSum=0, goldSum=0, silverSum=0, blackSum=0;
            for(int i=0; i<361; i++) {
                blueSum += Math.abs(blueHue[i]-imageHue[i]);
                blackSum += Math.abs(blackHue[i]-imageHue[i]);
                goldSum += Math.abs(goldHue[i]-imageHue[i]);
                silverSum += Math.abs(silverHue[i]-imageHue[i]);
            }
            
            if(blueSum<blackSum && blueSum<goldSum && blueSum<silverSum) {
                System.out.println("Result = BLUE!");
                return "BLUE";
            }
            else if(blackSum<blueSum && blackSum<goldSum && blackSum<silverSum) {
                System.out.println("Result = BLACK!");
                return "BLACK";
            }
            else if(goldSum<blackSum && goldSum<blueSum && goldSum<silverSum) {
                System.out.println("Result = GOLD!");
                return "GOLD";
            }
            else if(silverSum<blackSum && silverSum<goldSum && silverSum<blueSum) {
                System.out.println("Result = SILVER!");
                return "SILVER";
            }
            else {
                System.out.println("Not found!");
                return "ERROR";
            }*/
        }
        catch(IOException e) {System.out.println(e.getMessage()); return e.getMessage();}
    }
    
    public static int[] getHue(BufferedImage pic) {
        int[] Hue = new int[361];
        for(int i=0; i<361; i++)
            Hue[i] = 0;
        for(int x=0; x<pic.getTileWidth(); x++) {
            for(int y=0; y<pic.getTileHeight(); y++) {
                    int rgb = pic.getRGB(x,y);
                    float hsb[] = new float[3];
                    int r = (rgb >> 16) & 0xFF;
                    int g = (rgb >>  8) & 0xFF;
                    int b = (rgb      ) & 0xFF;
                    Color.RGBtoHSB(r, g, b, hsb);
                    int tone = Math.round(hsb[0]*360);
                    Hue[tone] += 1;
                    //averageColor+=image.getRGB(x, y);
            }
        }
        return Hue;
    }
    
    public static void createGraph() {
        try {
            BufferedImage image = ImageIO.read(new File("sample_images\\blackdarksample.jpg"));
            System.out.printf("height = %d\nwidth = %d\n",image.getTileHeight(),image.getTileWidth());
            /*int rgb = image.getRGB(0,0);
            float hsb[] = new float[3];
            int r = (rgb >> 16) & 0xFF;
            int g = (rgb >>  8) & 0xFF;
            int b = (rgb      ) & 0xFF;
            Color.RGBtoHSB(r, g, b, hsb);
            System.out.printf("rgb = %d 0x%X\nh = %f\ntone = %f\n", rgb, rgb, hsb[0], hsb[0] * 360);*/
            
            //int averageColor=0;
            int[] Hfrequency = new int[361];
            int[] Sfrequency = new int[361];
            int[] Bfrequency = new int[361];
            for(int i=0; i<361; i++) {
                Hfrequency[i] = 0;
                Sfrequency[i] = 0;
                Bfrequency[i] = 0;
            }
            for(int x=0; x<image.getTileWidth(); x++) {
                for(int y=0; y<image.getTileHeight(); y++) {
                    int rgb = image.getRGB(x,y);
                    float hsb[] = new float[3];
                    int r = (rgb >> 16) & 0xFF;
                    int g = (rgb >>  8) & 0xFF;
                    int b = (rgb      ) & 0xFF;
                    Color.RGBtoHSB(r, g, b, hsb);
                    int tone = Math.round(hsb[0]*360);
                    int S = Math.round(hsb[1]*360);
                    int B = Math.round(hsb[2]*360);
                    Hfrequency[tone] += 1;
                    Sfrequency[S] += 1;
                    Bfrequency[B] += 1;
                    //averageColor+=image.getRGB(x, y);
                }
            }
            XYSeries hueSeries = new XYSeries("Hue");
            XYSeries saturationSeries = new XYSeries("Saturation");
            XYSeries brightSeries = new XYSeries("Brightness");
            for(int i=0; i<361; i++) {
                hueSeries.add(i, Hfrequency[i]);
                saturationSeries.add(i, Sfrequency[i]);
                brightSeries.add(i, Bfrequency[i]);
            }
            XYSeriesCollection mydataset = new XYSeriesCollection();
            mydataset.addSeries(hueSeries);
            mydataset.addSeries(saturationSeries);
            mydataset.addSeries(brightSeries);
            
            JFreeChart xylineChart = ChartFactory.createXYLineChart(
                    "Black (dark) spectrum", "Value", "Relative Frequency",
                    mydataset, PlotOrientation.VERTICAL,
                    true, true, false);
            
            int width = 640;   /* Width of the image */
            int height = 480;  /* Height of the image */ 
            File XYChart = new File( "XYLineChart.jpeg" ); 
            ChartUtilities.saveChartAsJPEG(XYChart, xylineChart, width, height);
            System.out.println("Graph has been created!");
            //averageColor/=(image.getTileHeight()*image.getTileWidth());
            //System.out.printf("average color = %d 0x%X\n", averageColor, averageColor);
        }
        catch(IOException e) {System.out.println(e.getMessage());}
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        getPicture();
        IGV_Tester.color = validatePicture(IGV_Tester.colors);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(cam_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(cam_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(cam_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(cam_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new cam_UI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables

    /*public class Circle extends JPanel {
        public void paintComponent(Graphics g) {
            super.paintComponent(g);
            Graphics2D g2d = (Graphics2D) g;
            g2d.setPaint( Color.BLACK);                                  
            g2d.fill( new Ellipse2D.Double( 5, 30, 65, 100 ) );
            
            //setSize(500,500);
            //g.drawOval(100,100,50,50);
        }
        
    }*/

}