package igv_tester;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.concurrent.CountDownLatch;
import java.util.Calendar;

/**
 *
 * @author Juan Antonio Martinez Castellanos - U375716
 */
public class picture_UI extends javax.swing.JFrame {
    //This class displays the picture and prompts the
    //operator to check for chipping and asks for a response.
    public String IGV_serial;


    //The latch is necessary because Main has to wait for this window.
    public picture_UI(CountDownLatch l) {
        IGV_serial = "ERROR";
        setUndecorated(true);
        initComponents();
        jLabel1.setIcon(new javax.swing.ImageIcon("tempcapture.jpg"));
        setVisible(true);
        selection = '0';
        myLatch = l;
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonApprove = new javax.swing.JButton();
        jButtonRefactor = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonApprove.setBackground(new java.awt.Color(22, 165, 22));
        jButtonApprove.setText("Approve");
        jButtonApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonApproveActionPerformed(evt);
            }
        });
        jButtonApprove.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButtonApproveKeyPressed(evt);
            }
        });

        jButtonRefactor.setBackground(new java.awt.Color(198, 11, 11));
        jButtonRefactor.setText("Refactor");
        jButtonRefactor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefactorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(111, 111, 111)
                .addComponent(jButtonApprove, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 221, Short.MAX_VALUE)
                .addComponent(jButtonRefactor, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(115, 115, 115))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 476, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonApprove, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonRefactor, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonApproveActionPerformed
        //This is triggered if the operator approves the picture
        selection = 'A';
        myLatch.countDown();
        try { storePicture(); }
        catch(Exception e) { e.printStackTrace(); }
        finally { dispose(); }
    }//GEN-LAST:event_jButtonApproveActionPerformed
    
    private void jButtonRefactorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefactorActionPerformed
        //This is triggered if the operator rejects the picture
        selection = 'R';
        myLatch.countDown();
        dispose();
    }//GEN-LAST:event_jButtonRefactorActionPerformed

    private void jButtonApproveKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButtonApproveKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyChar() == 'L') {
            selection = 'A';
            try{Thread.sleep(500);} catch(Exception f){}
            myLatch.countDown();
            try { storePicture(); }
            catch(Exception e) { e.printStackTrace(); }
            finally { dispose(); }
        }
        else if(evt.getKeyChar() == 'R') {
            selection = 'R';
            try{Thread.sleep(500);} catch(Exception f){}
            myLatch.countDown();
            dispose();
        }
    }//GEN-LAST:event_jButtonApproveKeyPressed

    public void storePicture() {
        //Naming format:
        //3 letter part (IGV) + 5 digit Julian date + 2 digit vendor + 4 digit daily counter
        // IGVYYDDDVVXXXX -> example = IGV19270050037
        
        //Source gets overwritten everytime a picture is taken;
        File src = new File("tempcapture.jpg");
        //src must be saved into the "picture_log" directory
        //the name of the dest picture is serialized according to the naming
        //format shown above
        File dest = null;
        
        File currentDir = new File(IGV_Tester.getCurrentDir()+"\\picture_log");
        //Find the name of the newest picture in "picture_log"
        //build the new name based upon the newest picture name
        String newestFileName = "";
        long lastMod = Long.MIN_VALUE;
        for(File file : currentDir.listFiles()) {
            if(file.lastModified() > lastMod) {
                newestFileName = file.getName();
                lastMod = file.lastModified();
            }
        }
        
        //Compare dates to see if we are still in the same day
        Calendar lastDate = Calendar.getInstance();
        Calendar currentDate = Calendar.getInstance();
        lastDate.setTimeInMillis(lastMod);
        currentDate.setTimeInMillis(System.currentTimeMillis());
        
        boolean sameDay = lastDate.get(Calendar.DAY_OF_YEAR) == currentDate.get(Calendar.DAY_OF_YEAR)
                && lastDate.get(Calendar.YEAR) == currentDate.get(Calendar.YEAR);
        
        //if same day, cast to int, add 1, cast back to string
        if(sameDay)
            dest = new File("picture_log\\"+newestFileName.substring(0,8)+
                    IGV_Tester.vendor +
                    String.format("%04d", Integer.parseInt(newestFileName.substring(10, 14))+1) +
                    ".jpg");
        //else, make the 
        else
            dest = new File("picture_log\\IGV" +
                    (currentDate.get(Calendar.YEAR) % 100) +
                    currentDate.get(Calendar.DAY_OF_YEAR) +
                    IGV_Tester.vendor + "0001" + ".jpg");
        
        
        try {
            Files.copy(src.toPath(), dest.toPath());
            IGV_serial = dest.getName().substring(0, 14);
            IGV_Tester.IGV_serial = IGV_serial;
        }
        catch(IOException e) { e.printStackTrace(); }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(picture_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(picture_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(picture_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(picture_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //I didnt want this to run on a different thread.
        /* Create and display the form */
        /*java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new picture_UI().setVisible(true);
            }
        });*/
    }

    public char selection;
    private CountDownLatch myLatch;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonApprove;
    private javax.swing.JButton jButtonRefactor;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
